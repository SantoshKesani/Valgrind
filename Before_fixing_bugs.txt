Valgrind outputs before fixing bugs:

Running command, valgrind ./app/shell-app, we get

==5754== Memcheck, a memory error detector
==5754== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5754== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==5754== Command: ./app/shell-app
==5754== 
Averaged sensor reading: 10
==5754== Conditional jump or move depends on uninitialised value(s)
==5754==    at 0x10B4A8: main (main.cpp:9)
==5754== 
==5754== 
==5754== HEAP SUMMARY:
==5754==     in use at exit: 44 bytes in 2 blocks
==5754==   total heap usage: 7 allocs, 5 frees, 74,958 bytes allocated
==5754== 
==5754== LEAK SUMMARY:
==5754==    definitely lost: 24 bytes in 1 blocks
==5754==    indirectly lost: 20 bytes in 1 blocks
==5754==      possibly lost: 0 bytes in 0 blocks
==5754==    still reachable: 0 bytes in 0 blocks
==5754==         suppressed: 0 bytes in 0 blocks
==5754== Rerun with --leak-check=full to see details of leaked memory
==5754== 
==5754== For counts of detected and suppressed errors, rerun with: -v
==5754== Use --track-origins=yes to see where uninitialised values come from
==5754== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Error is due to the unassigned bool variable.

Running command, valgrind --tool=helgrind ./app/shell-app, we get

==5869== Helgrind, a thread error detector
==5869== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==5869== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==5869== Command: ./app/shell-app
==5869== 
Averaged sensor reading: 10
==5869== 
==5869== For counts of detected and suppressed errors, rerun with: -v
==5869== Use --history-level=approx or =none to gain increased speed, at
==5869== the cost of reduced accuracy of conflicting-access information
==5869== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Finally, running command valgrind --leak-check=full ./app/shell-app, we get

==5893== Memcheck, a memory error detector
==5893== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5893== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==5893== Command: ./app/shell-app
==5893== 
Averaged sensor reading: 10
==5893== Conditional jump or move depends on uninitialised value(s)
==5893==    at 0x10B4A8: main (main.cpp:9)
==5893== 
==5893== 
==5893== HEAP SUMMARY:
==5893==     in use at exit: 44 bytes in 2 blocks
==5893==   total heap usage: 7 allocs, 5 frees, 74,958 bytes allocated
==5893== 
==5893== 44 (24 direct, 20 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==5893==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==5893==    by 0x10B786: AnalogSensor::Read() (AnalogSensor.cpp:16)
==5893==    by 0x10B3FA: main (main.cpp:7)
==5893== 
==5893== LEAK SUMMARY:
==5893==    definitely lost: 24 bytes in 1 blocks
==5893==    indirectly lost: 20 bytes in 1 blocks
==5893==      possibly lost: 0 bytes in 0 blocks
==5893==    still reachable: 0 bytes in 0 blocks
==5893==         suppressed: 0 bytes in 0 blocks
==5893== 
==5893== For counts of detected and suppressed errors, rerun with: -v
==5893== Use --track-origins=yes to see where uninitialised values come from
==5893== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Bug is located in the code due to the presence of a raw pointer instead of a smart pointer.


